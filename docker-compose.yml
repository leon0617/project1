services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: project1-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-project1}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-project1_password}
      POSTGRES_DB: ${POSTGRES_DB:-project1_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - project1-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-project1}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: project1-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - project1-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    profiles:
      - with-redis

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: project1-backend
    restart: unless-stopped
    environment:
      # Application
      APP_NAME: ${APP_NAME:-Project1 API}
      DEBUG: ${DEBUG:-false}
      
      # Database
      DATABASE_TYPE: ${DATABASE_TYPE:-postgres}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-project1}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-project1_password}
      POSTGRES_DB: ${POSTGRES_DB:-project1_db}
      
      # Scheduler
      SCHEDULER_ENABLED: ${SCHEDULER_ENABLED:-false}
      SCHEDULER_TIMEZONE: ${SCHEDULER_TIMEZONE:-UTC}
      
      # Playwright
      PLAYWRIGHT_BROWSER: ${PLAYWRIGHT_BROWSER:-chromium}
      PLAYWRIGHT_HEADLESS: ${PLAYWRIGHT_HEADLESS:-true}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Seeding
      SEED_SAMPLE_DATA: ${SEED_SAMPLE_DATA:-false}
      
      # Redis (if enabled)
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      # Mount for development - hot reload
      - ./backend/app:/app/app:ro
      # Mount for migrations in development
      - ./backend/alembic:/app/alembic:rw
    networks:
      - project1-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: project1-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - project1-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

networks:
  project1-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
